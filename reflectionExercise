How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It minimized the content I needed to focus on.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I use less space, can see the changes as code progressed, and roll back
    to a previous version when I inevitably screw it up :).

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Not routinely committing can result in unwanted changes making it into the
    code, so time based would be useful there, but if you don't commit when
    it's working, you still have broken code, so that's a pro for manual
    commits, and a con for periodic time based commits.  Generally, I like
    to control when I commit, which allows me to try things that I may not
    want to make it into the final version.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Version control systems designed to support complex projects recognize
    the need to track larger numbers of changes, whereas a google docs doesn't
    expect you to be working on more than one file at a time.

How can you use the commands git log and git diff to view the history of files?

    git log helps review what's happened over a period of time, and git diff
    gets into the specifics of a given change between two versions of source

How might using version control make you more confident to make changes that
could break something?

    When you can always roll back, it's not costly to try new things.

Now that you have your workspace set up, what do you want to try using Git for?

    Primarily working in xcode, but I think it's built in there...