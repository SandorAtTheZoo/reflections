{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;\red36\green36\blue36;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720

\f0\fs28 \cf2 \expnd0\expndtw0\kerning0
What happens when you initialize a repository? Why do you need to do it?\
\
Initializing a repository sets up the .git directory and the metadata necessary to track changes to the repository and files.  It needs to be done so git can track changes from commits, retain comments, and maintain strict control over the status of the repository.\
\
How is the staging area different from the working directory and the repository? What value do you think it offers?\
\
The working directory is where your latest interactions with the repository reside. The repository is the record of everything that has been done prior to local changes being made.  The staging area is that intermediate buffer between what has been changed and what will be recorded so that you can \'91proofread\'92 what you\'92ve done prior to going on record with it (commit).\
\
\pard\pardeftab720
\cf2 \expnd0\expndtw0\kerning0
How can you use the staging area to make sure you have one commit per logical change?\
\
You can make changes in your working directory, without adding them to the staging area, and then git diff to see what changes you\'92ve made so far.  Then, you can run git add on only those files that you want to commit, then running git commit on the staging area that now contains only those files you want to commit, but not all files with changes necessarily.}